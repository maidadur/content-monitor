// <auto-generated />
using System;
using Maid.Content.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Maid.Content.DB.Migrations
{
    [DbContext(typeof(ContentDbContext))]
    [Migration("20231125133453_SourceStatusPositive1")]
    partial class SourceStatusPositive1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Maid.Content.DB.ContentInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Href")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsStatusPositive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("ContentInfo");
                });

            modelBuilder.Entity("Maid.Content.DB.ContentItemInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ContentInfoId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Date")
                        .HasColumnType("longtext");

                    b.Property<string>("Href")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ContentInfoId");

                    b.ToTable("ContentItemInfo");
                });

            modelBuilder.Entity("Maid.Content.DB.ContentItemNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ContentItemInfoId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ContentItemInfoId");

                    b.ToTable("ContentItemNotification");
                });

            modelBuilder.Entity("Maid.Content.DB.ContentSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<string>("CollectionItemDateXpath")
                        .HasColumnType("longtext");

                    b.Property<string>("CollectionItemHrefXpath")
                        .HasColumnType("longtext");

                    b.Property<string>("CollectionItemTitleXpath")
                        .HasColumnType("longtext");

                    b.Property<string>("CollectionItemXpath")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DomainUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageXpath")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("PositiveStatusText")
                        .HasColumnType("longtext");

                    b.Property<string>("StatusXpath")
                        .HasColumnType("longtext");

                    b.Property<string>("TitleXpath")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ContentSource");
                });

            modelBuilder.Entity("Maid.Content.DB.ContentInfo", b =>
                {
                    b.HasOne("Maid.Content.DB.ContentSource", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Maid.Content.DB.ContentItemInfo", b =>
                {
                    b.HasOne("Maid.Content.DB.ContentInfo", "ContentInfo")
                        .WithMany("Items")
                        .HasForeignKey("ContentInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentInfo");
                });

            modelBuilder.Entity("Maid.Content.DB.ContentItemNotification", b =>
                {
                    b.HasOne("Maid.Content.DB.ContentItemInfo", "ContentItemInfo")
                        .WithMany()
                        .HasForeignKey("ContentItemInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentItemInfo");
                });

            modelBuilder.Entity("Maid.Content.DB.ContentInfo", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
